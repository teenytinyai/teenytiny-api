#!/bin/bash

# TeenyTiny AI - Environment Health Check Script
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
INFRA_DIR="$SCRIPT_DIR"

# Check if environment is provided
if [ -z "$1" ]; then
    echo -e "${RED}‚ùå Usage: check [environment]${NC}"
    echo "Available environments:"
    yq eval '.environments | keys | .[]' "$INFRA_DIR/environments.yaml" 2>/dev/null || echo "  (install yq to see available environments)"
    exit 1
fi

ENVIRONMENT="$1"

echo -e "${CYAN}üîç TeenyTiny AI Health Check${NC}"
echo -e "${CYAN}Environment: ${YELLOW}$ENVIRONMENT${NC}"
echo "================================"

# Check if yq is installed
if ! command -v yq &> /dev/null; then
    echo -e "${RED}‚ùå yq is required but not installed${NC}"
    echo "Install with: brew install yq"
    exit 1
fi

# Load environment configuration
ENV_CONFIG="$INFRA_DIR/environments.yaml"
if [ ! -f "$ENV_CONFIG" ]; then
    echo -e "${RED}‚ùå Environment config not found: $ENV_CONFIG${NC}"
    exit 1
fi

# Extract environment variables using yq
DOMAIN=$(yq eval ".environments.$ENVIRONMENT.domain" "$ENV_CONFIG")
WORKER_NAME=$(yq eval ".environments.$ENVIRONMENT.worker_name" "$ENV_CONFIG")

# Check if environment exists
if [ "$DOMAIN" = "null" ]; then
    echo -e "${RED}‚ùå Environment '$ENVIRONMENT' not found in $ENV_CONFIG${NC}"
    echo "Available environments:"
    yq eval '.environments | keys | .[]' "$ENV_CONFIG"
    exit 1
fi

BASE_URL="https://$DOMAIN"

echo -e "${BLUE}üìã Environment: $ENVIRONMENT${NC}"
echo "  Domain: $DOMAIN"
echo "  Worker: $WORKER_NAME"
echo "  Base URL: $BASE_URL"
echo ""

# Load .env file for API key
if [ -f "$INFRA_DIR/.env" ]; then
    source "$INFRA_DIR/.env"
fi

# Generate test API key if not found
if [ -z "$API_KEY" ] || [ "$API_KEY" = "" ]; then
    # Generate a test key for validation
    TEST_API_KEY="tt-test-key-$(date +%s)"
    echo -e "${YELLOW}‚ÑπÔ∏è  No API_KEY in .env, using test key: $TEST_API_KEY${NC}"
else
    TEST_API_KEY="$API_KEY"
fi

# Test counters
TESTS_PASSED=0
TESTS_TOTAL=0

# Function to test HTTP endpoint
test_http() {
    local description="$1"
    local url="$2"
    local expected_status="$3"
    local expected_content_type="$4"
    local expected_content_pattern="$5"
    local auth_header="$6"
    
    TESTS_TOTAL=$((TESTS_TOTAL + 1))
    echo -e "${BLUE}Testing: $description${NC}"
    
    local curl_cmd="curl -s -w \"HTTP_STATUS:%{http_code}\" -m 10"
    local display_cmd="curl"
    if [ -n "$auth_header" ]; then
        curl_cmd="$curl_cmd -H \"$auth_header\""
        display_cmd="$display_cmd -H \"$auth_header\""
    fi
    display_cmd="$display_cmd \"$url\""
    
    echo -e "${CYAN}  Command: $display_cmd${NC}"
    echo -n -e "  Result: "
    
    if response=$(eval "$curl_cmd \"$url\"" 2>/dev/null); then
        # Extract status code and body
        local http_status=$(echo "$response" | grep -o "HTTP_STATUS:[0-9]*" | cut -d: -f2)
        local body=$(echo "$response" | sed 's/HTTP_STATUS:[0-9]*$//')
        
        local passed=true
        local error_msg=""
        
        # Check status code
        if [ "$http_status" != "$expected_status" ]; then
            passed=false
            error_msg="Expected status $expected_status, got $http_status"
        fi
        
        # Check content type if specified
        if [ -n "$expected_content_type" ] && $passed; then
            local content_type_header=$(eval "$curl_cmd -I \"$url\"" 2>/dev/null | grep -i "content-type:" | head -1)
            if ! echo "$content_type_header" | grep -q "$expected_content_type"; then
                passed=false
                error_msg="Expected content-type containing '$expected_content_type'"
            fi
        fi
        
        # Check content pattern if specified
        if [ -n "$expected_content_pattern" ] && $passed; then
            if ! echo "$body" | grep -q "$expected_content_pattern"; then
                passed=false
                error_msg="Expected content containing '$expected_content_pattern'"
            fi
        fi
        
        if $passed; then
            echo -e "${GREEN}‚úÖ PASS${NC}"
            TESTS_PASSED=$((TESTS_PASSED + 1))
            # Show first 100 chars of response for confirmation
            local preview=$(echo "$body" | head -c 100)
            if [ ${#body} -gt 100 ]; then
                preview="$preview..."
            fi
            echo "  Status: $http_status, Response: $preview"
        else
            echo -e "${RED}‚ùå FAIL${NC}"
            echo "  $error_msg"
            echo "  Status: $http_status, Response: $body"
        fi
    else
        echo -e "${RED}‚ùå FAIL${NC}"
        echo "  Connection failed"
    fi
    echo ""
}

# Run all tests
echo -e "${BLUE}üß™ Running Health Checks${NC}"
echo ""

# Test 1: Homepage returns 200 and HTML
test_http "Homepage (/) returns 200 and HTML" \
    "$BASE_URL/" \
    "200" \
    "text/html" \
    "TeenyTiny AI"

# Test 2: 404 page returns 404
test_http "Not found (/notfound) returns 404" \
    "$BASE_URL/notfound" \
    "404" \
    "" \
    ""

# Test 3: Health endpoint returns 200 and JSON
test_http "Health endpoint (/health) returns 200 and JSON" \
    "$BASE_URL/health" \
    "200" \
    "application/json" \
    "teenytiny-api"

# Test 4: Models without auth returns 401 and JSON
test_http "Models endpoint (/v1/models) without auth returns 401" \
    "$BASE_URL/v1/models" \
    "401" \
    "application/json" \
    "error"

# Test 5: Models with bad API key returns 401 and JSON
test_http "Models endpoint (/v1/models) with bad API key returns 401" \
    "$BASE_URL/v1/models" \
    "401" \
    "application/json" \
    "error" \
    "Authorization: Bearer bad-key-123"

# Test 6: Models with auth returns 200 and JSON
test_http "Models endpoint (/v1/models) with auth returns 200 and JSON" \
    "$BASE_URL/v1/models" \
    "200" \
    "application/json" \
    "echo" \
    "Authorization: Bearer $TEST_API_KEY"

echo ""
echo -e "${CYAN}üìä Health Check Results${NC}"
echo "================================"
echo -e "Tests passed: ${GREEN}$TESTS_PASSED${NC}/$TESTS_TOTAL"
echo "Environment: $ENVIRONMENT"
echo "Domain: $DOMAIN"
echo "Base URL: $BASE_URL"

if [ $TESTS_PASSED -eq $TESTS_TOTAL ]; then
    echo ""
    echo -e "${GREEN}üéâ All tests passed! Environment is healthy.${NC}"
    exit 0
else
    echo ""
    echo -e "${RED}‚ö†Ô∏è  Some tests failed. Check the environment.${NC}"
    exit 1
fi