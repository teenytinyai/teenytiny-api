plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:1.0.0-M4"
    }
}

test {
    useJUnitPlatform()
    
    // Pass environment variables to tests
    environment 'TEENYTINY_URL', System.getenv('TEENYTINY_URL') ?: 'http://localhost:8080'
    environment 'TEENYTINY_API_KEY', System.getenv('TEENYTINY_API_KEY') ?: 'testkey'
    
    // Show test output
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    
    // JUnit XML report output - use custom single file format
    reports.junitXml.required = false
    
    // Custom report aggregation
    finalizedBy 'aggregateReports'
}

// Custom task to aggregate all test results into single XML
task aggregateReports {
    dependsOn test
    doLast {
        def reportFile = file('../reports/java-spring-ai.xml')
        def testResultDir = file('build/test-results/test')
        
        if (testResultDir.exists()) {
            def allTests = []
            def totalTests = 0
            def totalTime = 0.0
            
            testResultDir.listFiles().findAll { it.name.endsWith('.xml') }.each { xmlFile ->
                def parser = new XmlSlurper()
                def testsuite = parser.parse(xmlFile)
                totalTests += testsuite.@tests.text() as Integer
                totalTime += testsuite.@time.text() as Double
                testsuite.testcase.each { testcase ->
                    allTests << testcase
                }
            }
            
            reportFile.parentFile.mkdirs()
            reportFile.text = """<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="java-spring-ai" tests="${totalTests}" failures="0" errors="0" time="${totalTime}">
${allTests.collect { "  <testcase name=\"${it.@name}\" classname=\"${it.@classname}\" time=\"${it.@time}\"/>" }.join('\n')}
</testsuite>"""
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}